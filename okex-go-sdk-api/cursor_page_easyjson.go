// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package okex

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4e0a9eeDecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(in *jlexer.Lexer, out *PagingResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ResultItems":
			if in.IsNull() {
				in.Skip()
				out.ResultItems = nil
			} else {
				in.Delim('[')
				if out.ResultItems == nil {
					if !in.IsDelim(']') {
						out.ResultItems = make([]map[string]string, 0, 8)
					} else {
						out.ResultItems = []map[string]string{}
					}
				} else {
					out.ResultItems = (out.ResultItems)[:0]
				}
				for !in.IsDelim(']') {
					var v1 map[string]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v1 = make(map[string]string)
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v2 string
							v2 = string(in.String())
							(v1)[key] = v2
							in.WantComma()
						}
						in.Delim('}')
					}
					out.ResultItems = append(out.ResultItems, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CursorBefore":
			out.CursorBefore = string(in.String())
		case "CursorAfter":
			out.CursorAfter = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e0a9eeEncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(out *jwriter.Writer, in PagingResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ResultItems\":"
		out.RawString(prefix[1:])
		if in.ResultItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.ResultItems {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v5First := true
					for v5Name, v5Value := range v4 {
						if v5First {
							v5First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v5Name))
						out.RawByte(':')
						out.String(string(v5Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CursorBefore\":"
		out.RawString(prefix)
		out.String(string(in.CursorBefore))
	}
	{
		const prefix string = ",\"CursorAfter\":"
		out.RawString(prefix)
		out.String(string(in.CursorAfter))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PagingResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e0a9eeEncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PagingResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e0a9eeEncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PagingResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e0a9eeDecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PagingResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e0a9eeDecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(l, v)
}
