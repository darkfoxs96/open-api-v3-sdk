// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package okex

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	decimal "github.com/shopspring/decimal"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(in *jlexer.Lexer, out *WSTableResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "table":
			out.Table = string(in.String())
		case "action":
			out.Action = string(in.String())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(out *jwriter.Writer, in WSTableResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"table\":"
		out.RawString(prefix[1:])
		out.String(string(in.Table))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WSTableResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSTableResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WSTableResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSTableResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi(l, v)
}
func easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi1(in *jlexer.Lexer, out *WSHotDepths) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Table":
			out.Table = string(in.String())
		case "DepthMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DepthMap = make(map[string]*WSDepthItem)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *WSDepthItem
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(WSDepthItem)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.DepthMap)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi1(out *jwriter.Writer, in WSHotDepths) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Table\":"
		out.RawString(prefix[1:])
		out.String(string(in.Table))
	}
	{
		const prefix string = ",\"DepthMap\":"
		out.RawString(prefix)
		if in.DepthMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.DepthMap {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WSHotDepths) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSHotDepths) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WSHotDepths) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSHotDepths) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi1(l, v)
}
func easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi2(in *jlexer.Lexer, out *WSEventResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.Event = string(in.String())
		case "Success":
			out.Success = string(in.String())
		case "channel":
			out.Channel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi2(out *jwriter.Writer, in WSEventResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"Success\":"
		out.RawString(prefix)
		out.String(string(in.Success))
	}
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		out.String(string(in.Channel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WSEventResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSEventResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WSEventResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSEventResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi2(l, v)
}
func easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi3(in *jlexer.Lexer, out *WSErrorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.Event = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi3(out *jwriter.Writer, in WSErrorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WSErrorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSErrorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WSErrorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSErrorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi3(l, v)
}
func easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi4(in *jlexer.Lexer, out *WSDepthTableResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "table":
			out.Table = string(in.String())
		case "action":
			out.Action = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*WSDepthItem, 0, 8)
					} else {
						out.Data = []*WSDepthItem{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *WSDepthItem
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(WSDepthItem)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi4(out *jwriter.Writer, in WSDepthTableResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"table\":"
		out.RawString(prefix[1:])
		out.String(string(in.Table))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Data {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WSDepthTableResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSDepthTableResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WSDepthTableResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSDepthTableResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi4(l, v)
}
func easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi5(in *jlexer.Lexer, out *WSDepthItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument_id":
			out.InstrumentId = string(in.String())
		case "asks":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([][3]decimal.Decimal, 0, 1)
					} else {
						out.Asks = [][3]decimal.Decimal{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v6 [3]decimal.Decimal
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v7 := 0
						for !in.IsDelim(']') {
							if v7 < 3 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v6)[v7]).UnmarshalJSON(data))
								}
								v7++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Asks = append(out.Asks, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bids":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([][3]decimal.Decimal, 0, 1)
					} else {
						out.Bids = [][3]decimal.Decimal{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v8 [3]decimal.Decimal
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v9 := 0
						for !in.IsDelim(']') {
							if v9 < 3 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v8)[v9]).UnmarshalJSON(data))
								}
								v9++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bids = append(out.Bids, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timestamp":
			out.Timestamp = string(in.String())
		case "checksum":
			out.Checksum = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi5(out *jwriter.Writer, in WSDepthItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.InstrumentId))
	}
	{
		const prefix string = ",\"asks\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Asks {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v12 := range v11 {
					if v12 > 0 {
						out.RawByte(',')
					}
					out.Raw(((v11)[v12]).MarshalJSON())
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bids\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Bids {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v15 := range v14 {
					if v15 > 0 {
						out.RawByte(',')
					}
					out.Raw(((v14)[v15]).MarshalJSON())
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.Int32(int32(in.Checksum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WSDepthItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSDepthItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WSDepthItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSDepthItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi5(l, v)
}
func easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi6(in *jlexer.Lexer, out *SubscriptionTopic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi6(out *jwriter.Writer, in SubscriptionTopic) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionTopic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionTopic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionTopic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionTopic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi6(l, v)
}
func easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi7(in *jlexer.Lexer, out *BaseOp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Args = append(out.Args, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi7(out *jwriter.Writer, in BaseOp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Args {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseOp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseOp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3248cf0EncodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseOp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseOp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3248cf0DecodeGithubComDarkfoxs96OpenApiV3SdkOkexGoSdkApi7(l, v)
}
